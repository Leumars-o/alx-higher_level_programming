Test cases for 5-text_indentation.py
---------------------------------------------------

>>> text_indentation = __import__('5-text_indentation').text_indentation

Base Case:
>>> text_indentation("""Lorem ipsum dolor sit amet, consectetur adipiscing elit. \
Quonam modo? Utrum igitur tibi litteram videor an totas paginas commovere? \
Non autem hoc: igitur ne illud quidem. Fortasse id optimum, sed ubi illud: \
Plus semper voluptatis? Teneo, inquit, finem illi videri nihil dolere. \
Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum \
rationi oboediens. Si id dicis, vicimus. Inde sermone vario sex illa a Dipylo \
stadia confecimus. Sin aliud quid voles, postea. Quae animi affectio suum \
cuique tribuens atque hanc, quam dico. Utinam quidem dicerent alium alio \
beatiorem! Iam ruinas videres""")

Quonam modo?

Utrum igitur tibi litteram videor an totas paginas commovere?

Non autem hoc:

igitur ne illud quidem.

Fortasse id optimum, sed ubi illud:

Plus semper voluptatis?

Teneo, inquit, finem illi videri nihil dolere.

Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum rationi oboediens.

Si id dicis, vicimus.

Inde sermone vario sex illa a Dipylo stadia confecimus.

Sin aliud quid voles, postea.

Quae animi affectio suum cuique tribuens atque hanc, quam dico.

case: passed empty

>>> text_indentation()
Traceback (most recent call last):
    ...
TypeError: text_indentation() missing 1 required positional argument: 'text'

case: passed integer

>>> text_indentation(12345)
Traceback (most recent call last):
    ...
TypeError: text must be a string

Case: bool

>>> text_indentation(True)
Traceback (most recent call last):
    ...
TypeError: text must be a string

case: empty string

>>> text_indentation(" ")

case: dict

>>> text_indentation({"hello"})
Traceback (most recent call last):
    ...
TypeError: text must be a string

case: tuple

>>> text_indentation(("hello", "world"))
Traceback (most recent call last):
    ...
TypeError: text must be a string
